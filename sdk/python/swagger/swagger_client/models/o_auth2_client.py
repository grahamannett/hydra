# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OAuth2Client(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_name': 'str',
        'client_secret': 'str',
        'client_uri': 'str',
        'contacts': 'list[str]',
        'grant_types': 'list[str]',
        'id': 'str',
        'logo_uri': 'str',
        'owner': 'str',
        'policy_uri': 'str',
        'public': 'bool',
        'redirect_uris': 'list[str]',
        'response_types': 'list[str]',
        'scope': 'str',
        'tos_uri': 'str'
    }

    attribute_map = {
        'client_name': 'client_name',
        'client_secret': 'client_secret',
        'client_uri': 'client_uri',
        'contacts': 'contacts',
        'grant_types': 'grant_types',
        'id': 'id',
        'logo_uri': 'logo_uri',
        'owner': 'owner',
        'policy_uri': 'policy_uri',
        'public': 'public',
        'redirect_uris': 'redirect_uris',
        'response_types': 'response_types',
        'scope': 'scope',
        'tos_uri': 'tos_uri'
    }

    def __init__(self, client_name=None, client_secret=None, client_uri=None, contacts=None, grant_types=None, id=None, logo_uri=None, owner=None, policy_uri=None, public=None, redirect_uris=None, response_types=None, scope=None, tos_uri=None):
        """
        OAuth2Client - a model defined in Swagger
        """

        self._client_name = None
        self._client_secret = None
        self._client_uri = None
        self._contacts = None
        self._grant_types = None
        self._id = None
        self._logo_uri = None
        self._owner = None
        self._policy_uri = None
        self._public = None
        self._redirect_uris = None
        self._response_types = None
        self._scope = None
        self._tos_uri = None

        if client_name is not None:
          self.client_name = client_name
        if client_secret is not None:
          self.client_secret = client_secret
        if client_uri is not None:
          self.client_uri = client_uri
        if contacts is not None:
          self.contacts = contacts
        if grant_types is not None:
          self.grant_types = grant_types
        if id is not None:
          self.id = id
        if logo_uri is not None:
          self.logo_uri = logo_uri
        if owner is not None:
          self.owner = owner
        if policy_uri is not None:
          self.policy_uri = policy_uri
        if public is not None:
          self.public = public
        if redirect_uris is not None:
          self.redirect_uris = redirect_uris
        if response_types is not None:
          self.response_types = response_types
        if scope is not None:
          self.scope = scope
        if tos_uri is not None:
          self.tos_uri = tos_uri

    @property
    def client_name(self):
        """
        Gets the client_name of this OAuth2Client.
        Name is the human-readable string name of the client to be presented to the end-user during authorization.

        :return: The client_name of this OAuth2Client.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """
        Sets the client_name of this OAuth2Client.
        Name is the human-readable string name of the client to be presented to the end-user during authorization.

        :param client_name: The client_name of this OAuth2Client.
        :type: str
        """

        self._client_name = client_name

    @property
    def client_secret(self):
        """
        Gets the client_secret of this OAuth2Client.
        Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.

        :return: The client_secret of this OAuth2Client.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this OAuth2Client.
        Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.

        :param client_secret: The client_secret of this OAuth2Client.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def client_uri(self):
        """
        Gets the client_uri of this OAuth2Client.
        ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.

        :return: The client_uri of this OAuth2Client.
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """
        Sets the client_uri of this OAuth2Client.
        ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.

        :param client_uri: The client_uri of this OAuth2Client.
        :type: str
        """

        self._client_uri = client_uri

    @property
    def contacts(self):
        """
        Gets the contacts of this OAuth2Client.
        Contacts is a array of strings representing ways to contact people responsible for this client, typically email addresses.

        :return: The contacts of this OAuth2Client.
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this OAuth2Client.
        Contacts is a array of strings representing ways to contact people responsible for this client, typically email addresses.

        :param contacts: The contacts of this OAuth2Client.
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def grant_types(self):
        """
        Gets the grant_types of this OAuth2Client.
        GrantTypes is an array of grant types the client is allowed to use.

        :return: The grant_types of this OAuth2Client.
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """
        Sets the grant_types of this OAuth2Client.
        GrantTypes is an array of grant types the client is allowed to use.

        :param grant_types: The grant_types of this OAuth2Client.
        :type: list[str]
        """

        self._grant_types = grant_types

    @property
    def id(self):
        """
        Gets the id of this OAuth2Client.
        ID is the id for this client.

        :return: The id of this OAuth2Client.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OAuth2Client.
        ID is the id for this client.

        :param id: The id of this OAuth2Client.
        :type: str
        """

        self._id = id

    @property
    def logo_uri(self):
        """
        Gets the logo_uri of this OAuth2Client.
        LogoURI is an URL string that references a logo for the client.

        :return: The logo_uri of this OAuth2Client.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """
        Sets the logo_uri of this OAuth2Client.
        LogoURI is an URL string that references a logo for the client.

        :param logo_uri: The logo_uri of this OAuth2Client.
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def owner(self):
        """
        Gets the owner of this OAuth2Client.
        Owner is a string identifying the owner of the OAuth 2.0 Client.

        :return: The owner of this OAuth2Client.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this OAuth2Client.
        Owner is a string identifying the owner of the OAuth 2.0 Client.

        :param owner: The owner of this OAuth2Client.
        :type: str
        """

        self._owner = owner

    @property
    def policy_uri(self):
        """
        Gets the policy_uri of this OAuth2Client.
        PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.

        :return: The policy_uri of this OAuth2Client.
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """
        Sets the policy_uri of this OAuth2Client.
        PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.

        :param policy_uri: The policy_uri of this OAuth2Client.
        :type: str
        """

        self._policy_uri = policy_uri

    @property
    def public(self):
        """
        Gets the public of this OAuth2Client.
        Public is a boolean that identifies this client as public, meaning that it does not have a secret. It will disable the client_credentials grant type for this client if set.

        :return: The public of this OAuth2Client.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this OAuth2Client.
        Public is a boolean that identifies this client as public, meaning that it does not have a secret. It will disable the client_credentials grant type for this client if set.

        :param public: The public of this OAuth2Client.
        :type: bool
        """

        self._public = public

    @property
    def redirect_uris(self):
        """
        Gets the redirect_uris of this OAuth2Client.
        RedirectURIs is an array of allowed redirect urls for the client, for example: http://mydomain/oauth/callback .

        :return: The redirect_uris of this OAuth2Client.
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """
        Sets the redirect_uris of this OAuth2Client.
        RedirectURIs is an array of allowed redirect urls for the client, for example: http://mydomain/oauth/callback .

        :param redirect_uris: The redirect_uris of this OAuth2Client.
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def response_types(self):
        """
        Gets the response_types of this OAuth2Client.
        ResponseTypes is an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.

        :return: The response_types of this OAuth2Client.
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """
        Sets the response_types of this OAuth2Client.
        ResponseTypes is an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.

        :param response_types: The response_types of this OAuth2Client.
        :type: list[str]
        """

        self._response_types = response_types

    @property
    def scope(self):
        """
        Gets the scope of this OAuth2Client.
        Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.

        :return: The scope of this OAuth2Client.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this OAuth2Client.
        Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.

        :param scope: The scope of this OAuth2Client.
        :type: str
        """
        if scope is not None and not re.search('([a-zA-Z0-9\\.\\*]+\\s)+', scope):
            raise ValueError("Invalid value for `scope`, must be a follow pattern or equal to `/([a-zA-Z0-9\\.\\*]+\\s)+/`")

        self._scope = scope

    @property
    def tos_uri(self):
        """
        Gets the tos_uri of this OAuth2Client.
        TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.

        :return: The tos_uri of this OAuth2Client.
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """
        Sets the tos_uri of this OAuth2Client.
        TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.

        :param tos_uri: The tos_uri of this OAuth2Client.
        :type: str
        """

        self._tos_uri = tos_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OAuth2Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
