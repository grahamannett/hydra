# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OAuth2TokenIntrospection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'aud': 'str',
        'client_id': 'str',
        'exp': 'int',
        'ext': 'dict(str, object)',
        'iat': 'int',
        'iss': 'str',
        'nbf': 'int',
        'scope': 'str',
        'sub': 'str',
        'username': 'str'
    }

    attribute_map = {
        'active': 'active',
        'aud': 'aud',
        'client_id': 'client_id',
        'exp': 'exp',
        'ext': 'ext',
        'iat': 'iat',
        'iss': 'iss',
        'nbf': 'nbf',
        'scope': 'scope',
        'sub': 'sub',
        'username': 'username'
    }

    def __init__(self, active=None, aud=None, client_id=None, exp=None, ext=None, iat=None, iss=None, nbf=None, scope=None, sub=None, username=None):
        """
        OAuth2TokenIntrospection - a model defined in Swagger
        """

        self._active = None
        self._aud = None
        self._client_id = None
        self._exp = None
        self._ext = None
        self._iat = None
        self._iss = None
        self._nbf = None
        self._scope = None
        self._sub = None
        self._username = None

        if active is not None:
          self.active = active
        if aud is not None:
          self.aud = aud
        if client_id is not None:
          self.client_id = client_id
        if exp is not None:
          self.exp = exp
        if ext is not None:
          self.ext = ext
        if iat is not None:
          self.iat = iat
        if iss is not None:
          self.iss = iss
        if nbf is not None:
          self.nbf = nbf
        if scope is not None:
          self.scope = scope
        if sub is not None:
          self.sub = sub
        if username is not None:
          self.username = username

    @property
    def active(self):
        """
        Gets the active of this OAuth2TokenIntrospection.
        Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token's \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).

        :return: The active of this OAuth2TokenIntrospection.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this OAuth2TokenIntrospection.
        Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token's \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).

        :param active: The active of this OAuth2TokenIntrospection.
        :type: bool
        """

        self._active = active

    @property
    def aud(self):
        """
        Gets the aud of this OAuth2TokenIntrospection.
        ClientID is a service-specific string identifier or list of string identifiers representing the intended audience for this token.

        :return: The aud of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._aud

    @aud.setter
    def aud(self, aud):
        """
        Sets the aud of this OAuth2TokenIntrospection.
        ClientID is a service-specific string identifier or list of string identifiers representing the intended audience for this token.

        :param aud: The aud of this OAuth2TokenIntrospection.
        :type: str
        """

        self._aud = aud

    @property
    def client_id(self):
        """
        Gets the client_id of this OAuth2TokenIntrospection.
        ClientID is aclient identifier for the OAuth 2.0 client that requested this token.

        :return: The client_id of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this OAuth2TokenIntrospection.
        ClientID is aclient identifier for the OAuth 2.0 client that requested this token.

        :param client_id: The client_id of this OAuth2TokenIntrospection.
        :type: str
        """

        self._client_id = client_id

    @property
    def exp(self):
        """
        Gets the exp of this OAuth2TokenIntrospection.
        Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.

        :return: The exp of this OAuth2TokenIntrospection.
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """
        Sets the exp of this OAuth2TokenIntrospection.
        Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.

        :param exp: The exp of this OAuth2TokenIntrospection.
        :type: int
        """

        self._exp = exp

    @property
    def ext(self):
        """
        Gets the ext of this OAuth2TokenIntrospection.
        Extra is arbitrary data set by the session.

        :return: The ext of this OAuth2TokenIntrospection.
        :rtype: dict(str, object)
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """
        Sets the ext of this OAuth2TokenIntrospection.
        Extra is arbitrary data set by the session.

        :param ext: The ext of this OAuth2TokenIntrospection.
        :type: dict(str, object)
        """

        self._ext = ext

    @property
    def iat(self):
        """
        Gets the iat of this OAuth2TokenIntrospection.
        Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.

        :return: The iat of this OAuth2TokenIntrospection.
        :rtype: int
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """
        Sets the iat of this OAuth2TokenIntrospection.
        Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.

        :param iat: The iat of this OAuth2TokenIntrospection.
        :type: int
        """

        self._iat = iat

    @property
    def iss(self):
        """
        Gets the iss of this OAuth2TokenIntrospection.
        Issuer is a string representing the issuer of this token

        :return: The iss of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._iss

    @iss.setter
    def iss(self, iss):
        """
        Sets the iss of this OAuth2TokenIntrospection.
        Issuer is a string representing the issuer of this token

        :param iss: The iss of this OAuth2TokenIntrospection.
        :type: str
        """

        self._iss = iss

    @property
    def nbf(self):
        """
        Gets the nbf of this OAuth2TokenIntrospection.
        NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.

        :return: The nbf of this OAuth2TokenIntrospection.
        :rtype: int
        """
        return self._nbf

    @nbf.setter
    def nbf(self, nbf):
        """
        Sets the nbf of this OAuth2TokenIntrospection.
        NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.

        :param nbf: The nbf of this OAuth2TokenIntrospection.
        :type: int
        """

        self._nbf = nbf

    @property
    def scope(self):
        """
        Gets the scope of this OAuth2TokenIntrospection.
        Scope is a JSON string containing a space-separated list of scopes associated with this token.

        :return: The scope of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this OAuth2TokenIntrospection.
        Scope is a JSON string containing a space-separated list of scopes associated with this token.

        :param scope: The scope of this OAuth2TokenIntrospection.
        :type: str
        """

        self._scope = scope

    @property
    def sub(self):
        """
        Gets the sub of this OAuth2TokenIntrospection.
        Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.

        :return: The sub of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """
        Sets the sub of this OAuth2TokenIntrospection.
        Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.

        :param sub: The sub of this OAuth2TokenIntrospection.
        :type: str
        """

        self._sub = sub

    @property
    def username(self):
        """
        Gets the username of this OAuth2TokenIntrospection.
        Username is a human-readable identifier for the resource owner who authorized this token.

        :return: The username of this OAuth2TokenIntrospection.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this OAuth2TokenIntrospection.
        Username is a human-readable identifier for the resource owner who authorized this token.

        :param username: The username of this OAuth2TokenIntrospection.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OAuth2TokenIntrospection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
