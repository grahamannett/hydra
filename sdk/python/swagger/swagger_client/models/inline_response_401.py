# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse401(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'details': 'list[dict(str, object)]',
        'message': 'str',
        'reason': 'str',
        'request': 'str',
        'status': 'str'
    }

    attribute_map = {
        'code': 'code',
        'details': 'details',
        'message': 'message',
        'reason': 'reason',
        'request': 'request',
        'status': 'status'
    }

    def __init__(self, code=None, details=None, message=None, reason=None, request=None, status=None):
        """
        InlineResponse401 - a model defined in Swagger
        """

        self._code = None
        self._details = None
        self._message = None
        self._reason = None
        self._request = None
        self._status = None

        if code is not None:
          self.code = code
        if details is not None:
          self.details = details
        if message is not None:
          self.message = message
        if reason is not None:
          self.reason = reason
        if request is not None:
          self.request = request
        if status is not None:
          self.status = status

    @property
    def code(self):
        """
        Gets the code of this InlineResponse401.

        :return: The code of this InlineResponse401.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this InlineResponse401.

        :param code: The code of this InlineResponse401.
        :type: int
        """

        self._code = code

    @property
    def details(self):
        """
        Gets the details of this InlineResponse401.

        :return: The details of this InlineResponse401.
        :rtype: list[dict(str, object)]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this InlineResponse401.

        :param details: The details of this InlineResponse401.
        :type: list[dict(str, object)]
        """

        self._details = details

    @property
    def message(self):
        """
        Gets the message of this InlineResponse401.

        :return: The message of this InlineResponse401.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this InlineResponse401.

        :param message: The message of this InlineResponse401.
        :type: str
        """

        self._message = message

    @property
    def reason(self):
        """
        Gets the reason of this InlineResponse401.

        :return: The reason of this InlineResponse401.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this InlineResponse401.

        :param reason: The reason of this InlineResponse401.
        :type: str
        """

        self._reason = reason

    @property
    def request(self):
        """
        Gets the request of this InlineResponse401.

        :return: The request of this InlineResponse401.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """
        Sets the request of this InlineResponse401.

        :param request: The request of this InlineResponse401.
        :type: str
        """

        self._request = request

    @property
    def status(self):
        """
        Gets the status of this InlineResponse401.

        :return: The status of this InlineResponse401.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse401.

        :param status: The status of this InlineResponse401.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse401):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
