# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Policy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[str]',
        'conditions': 'dict(str, PolicyConditions)',
        'description': 'str',
        'effect': 'str',
        'id': 'str',
        'resources': 'list[str]',
        'subjects': 'list[str]'
    }

    attribute_map = {
        'actions': 'actions',
        'conditions': 'conditions',
        'description': 'description',
        'effect': 'effect',
        'id': 'id',
        'resources': 'resources',
        'subjects': 'subjects'
    }

    def __init__(self, actions=None, conditions=None, description=None, effect=None, id=None, resources=None, subjects=None):
        """
        Policy - a model defined in Swagger
        """

        self._actions = None
        self._conditions = None
        self._description = None
        self._effect = None
        self._id = None
        self._resources = None
        self._subjects = None

        if actions is not None:
          self.actions = actions
        if conditions is not None:
          self.conditions = conditions
        if description is not None:
          self.description = description
        if effect is not None:
          self.effect = effect
        if id is not None:
          self.id = id
        if resources is not None:
          self.resources = resources
        if subjects is not None:
          self.subjects = subjects

    @property
    def actions(self):
        """
        Gets the actions of this Policy.
        Actions impacted by the policy.

        :return: The actions of this Policy.
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Policy.
        Actions impacted by the policy.

        :param actions: The actions of this Policy.
        :type: list[str]
        """

        self._actions = actions

    @property
    def conditions(self):
        """
        Gets the conditions of this Policy.
        Conditions under which the policy is active.

        :return: The conditions of this Policy.
        :rtype: dict(str, PolicyConditions)
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this Policy.
        Conditions under which the policy is active.

        :param conditions: The conditions of this Policy.
        :type: dict(str, PolicyConditions)
        """

        self._conditions = conditions

    @property
    def description(self):
        """
        Gets the description of this Policy.
        Description of the policy.

        :return: The description of this Policy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Policy.
        Description of the policy.

        :param description: The description of this Policy.
        :type: str
        """

        self._description = description

    @property
    def effect(self):
        """
        Gets the effect of this Policy.
        Effect of the policy

        :return: The effect of this Policy.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """
        Sets the effect of this Policy.
        Effect of the policy

        :param effect: The effect of this Policy.
        :type: str
        """

        self._effect = effect

    @property
    def id(self):
        """
        Gets the id of this Policy.
        ID of the policy.

        :return: The id of this Policy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Policy.
        ID of the policy.

        :param id: The id of this Policy.
        :type: str
        """

        self._id = id

    @property
    def resources(self):
        """
        Gets the resources of this Policy.
        Resources impacted by the policy.

        :return: The resources of this Policy.
        :rtype: list[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this Policy.
        Resources impacted by the policy.

        :param resources: The resources of this Policy.
        :type: list[str]
        """

        self._resources = resources

    @property
    def subjects(self):
        """
        Gets the subjects of this Policy.
        Subjects impacted by the policy.

        :return: The subjects of this Policy.
        :rtype: list[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """
        Sets the subjects of this Policy.
        Subjects impacted by the policy.

        :param subjects: The subjects of this Policy.
        :type: list[str]
        """

        self._subjects = subjects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
