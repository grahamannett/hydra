# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConsentRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'expires_at': 'datetime',
        'id': 'str',
        'redirect_url': 'str',
        'requested_scopes': 'list[str]'
    }

    attribute_map = {
        'client_id': 'clientId',
        'expires_at': 'expiresAt',
        'id': 'id',
        'redirect_url': 'redirectUrl',
        'requested_scopes': 'requestedScopes'
    }

    def __init__(self, client_id=None, expires_at=None, id=None, redirect_url=None, requested_scopes=None):
        """
        ConsentRequest - a model defined in Swagger
        """

        self._client_id = None
        self._expires_at = None
        self._id = None
        self._redirect_url = None
        self._requested_scopes = None

        if client_id is not None:
          self.client_id = client_id
        if expires_at is not None:
          self.expires_at = expires_at
        if id is not None:
          self.id = id
        if redirect_url is not None:
          self.redirect_url = redirect_url
        if requested_scopes is not None:
          self.requested_scopes = requested_scopes

    @property
    def client_id(self):
        """
        Gets the client_id of this ConsentRequest.
        ClientID is the client id that initiated the OAuth2 request.

        :return: The client_id of this ConsentRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this ConsentRequest.
        ClientID is the client id that initiated the OAuth2 request.

        :param client_id: The client_id of this ConsentRequest.
        :type: str
        """

        self._client_id = client_id

    @property
    def expires_at(self):
        """
        Gets the expires_at of this ConsentRequest.
        ExpiresAt is the time where the access request will expire.

        :return: The expires_at of this ConsentRequest.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this ConsentRequest.
        ExpiresAt is the time where the access request will expire.

        :param expires_at: The expires_at of this ConsentRequest.
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """
        Gets the id of this ConsentRequest.
        ID is the id of this consent request.

        :return: The id of this ConsentRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConsentRequest.
        ID is the id of this consent request.

        :param id: The id of this ConsentRequest.
        :type: str
        """

        self._id = id

    @property
    def redirect_url(self):
        """
        Gets the redirect_url of this ConsentRequest.
        Redirect URL is the URL where the user agent should be redirected to after the consent has been accepted or rejected.

        :return: The redirect_url of this ConsentRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """
        Sets the redirect_url of this ConsentRequest.
        Redirect URL is the URL where the user agent should be redirected to after the consent has been accepted or rejected.

        :param redirect_url: The redirect_url of this ConsentRequest.
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def requested_scopes(self):
        """
        Gets the requested_scopes of this ConsentRequest.
        RequestedScopes represents a list of scopes that have been requested by the OAuth2 request initiator.

        :return: The requested_scopes of this ConsentRequest.
        :rtype: list[str]
        """
        return self._requested_scopes

    @requested_scopes.setter
    def requested_scopes(self, requested_scopes):
        """
        Sets the requested_scopes of this ConsentRequest.
        RequestedScopes represents a list of scopes that have been requested by the OAuth2 request initiator.

        :param requested_scopes: The requested_scopes of this ConsentRequest.
        :type: list[str]
        """

        self._requested_scopes = requested_scopes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConsentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
