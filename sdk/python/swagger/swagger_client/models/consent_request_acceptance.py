# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConsentRequestAcceptance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token_extra': 'dict(str, object)',
        'grant_scopes': 'list[str]',
        'id_token_extra': 'dict(str, object)',
        'subject': 'str'
    }

    attribute_map = {
        'access_token_extra': 'accessTokenExtra',
        'grant_scopes': 'grantScopes',
        'id_token_extra': 'idTokenExtra',
        'subject': 'subject'
    }

    def __init__(self, access_token_extra=None, grant_scopes=None, id_token_extra=None, subject=None):
        """
        ConsentRequestAcceptance - a model defined in Swagger
        """

        self._access_token_extra = None
        self._grant_scopes = None
        self._id_token_extra = None
        self._subject = None

        if access_token_extra is not None:
          self.access_token_extra = access_token_extra
        if grant_scopes is not None:
          self.grant_scopes = grant_scopes
        if id_token_extra is not None:
          self.id_token_extra = id_token_extra
        if subject is not None:
          self.subject = subject

    @property
    def access_token_extra(self):
        """
        Gets the access_token_extra of this ConsentRequestAcceptance.
        AccessTokenExtra represents arbitrary data that will be added to the access token and that will be returned on introspection and warden requests.

        :return: The access_token_extra of this ConsentRequestAcceptance.
        :rtype: dict(str, object)
        """
        return self._access_token_extra

    @access_token_extra.setter
    def access_token_extra(self, access_token_extra):
        """
        Sets the access_token_extra of this ConsentRequestAcceptance.
        AccessTokenExtra represents arbitrary data that will be added to the access token and that will be returned on introspection and warden requests.

        :param access_token_extra: The access_token_extra of this ConsentRequestAcceptance.
        :type: dict(str, object)
        """

        self._access_token_extra = access_token_extra

    @property
    def grant_scopes(self):
        """
        Gets the grant_scopes of this ConsentRequestAcceptance.
        A list of scopes that the user agreed to grant. It should be a subset of requestedScopes from the consent request.

        :return: The grant_scopes of this ConsentRequestAcceptance.
        :rtype: list[str]
        """
        return self._grant_scopes

    @grant_scopes.setter
    def grant_scopes(self, grant_scopes):
        """
        Sets the grant_scopes of this ConsentRequestAcceptance.
        A list of scopes that the user agreed to grant. It should be a subset of requestedScopes from the consent request.

        :param grant_scopes: The grant_scopes of this ConsentRequestAcceptance.
        :type: list[str]
        """

        self._grant_scopes = grant_scopes

    @property
    def id_token_extra(self):
        """
        Gets the id_token_extra of this ConsentRequestAcceptance.
        IDTokenExtra represents arbitrary data that will be added to the ID token. The ID token will only be issued if the user agrees to it and if the client requested an ID token.

        :return: The id_token_extra of this ConsentRequestAcceptance.
        :rtype: dict(str, object)
        """
        return self._id_token_extra

    @id_token_extra.setter
    def id_token_extra(self, id_token_extra):
        """
        Sets the id_token_extra of this ConsentRequestAcceptance.
        IDTokenExtra represents arbitrary data that will be added to the ID token. The ID token will only be issued if the user agrees to it and if the client requested an ID token.

        :param id_token_extra: The id_token_extra of this ConsentRequestAcceptance.
        :type: dict(str, object)
        """

        self._id_token_extra = id_token_extra

    @property
    def subject(self):
        """
        Gets the subject of this ConsentRequestAcceptance.
        Subject represents a unique identifier of the user (or service, or legal entity, ...) that accepted the OAuth2 request.

        :return: The subject of this ConsentRequestAcceptance.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ConsentRequestAcceptance.
        Subject represents a unique identifier of the user (or service, or legal entity, ...) that accepted the OAuth2 request.

        :param subject: The subject of this ConsentRequestAcceptance.
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConsentRequestAcceptance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
