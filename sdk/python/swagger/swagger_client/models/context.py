# coding: utf-8

"""
    Hydra OAuth2 & OpenID Connect Server

    Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml

    OpenAPI spec version: Latest
    Contact: hi@ory.am
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Context(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token_extra': 'dict(str, object)',
        'client_id': 'str',
        'expires_at': 'datetime',
        'granted_scopes': 'list[str]',
        'issued_at': 'datetime',
        'issuer': 'str',
        'subject': 'str'
    }

    attribute_map = {
        'access_token_extra': 'accessTokenExtra',
        'client_id': 'clientId',
        'expires_at': 'expiresAt',
        'granted_scopes': 'grantedScopes',
        'issued_at': 'issuedAt',
        'issuer': 'issuer',
        'subject': 'subject'
    }

    def __init__(self, access_token_extra=None, client_id=None, expires_at=None, granted_scopes=None, issued_at=None, issuer=None, subject=None):
        """
        Context - a model defined in Swagger
        """

        self._access_token_extra = None
        self._client_id = None
        self._expires_at = None
        self._granted_scopes = None
        self._issued_at = None
        self._issuer = None
        self._subject = None

        if access_token_extra is not None:
          self.access_token_extra = access_token_extra
        if client_id is not None:
          self.client_id = client_id
        if expires_at is not None:
          self.expires_at = expires_at
        if granted_scopes is not None:
          self.granted_scopes = granted_scopes
        if issued_at is not None:
          self.issued_at = issued_at
        if issuer is not None:
          self.issuer = issuer
        if subject is not None:
          self.subject = subject

    @property
    def access_token_extra(self):
        """
        Gets the access_token_extra of this Context.
        Extra represents arbitrary session data.

        :return: The access_token_extra of this Context.
        :rtype: dict(str, object)
        """
        return self._access_token_extra

    @access_token_extra.setter
    def access_token_extra(self, access_token_extra):
        """
        Sets the access_token_extra of this Context.
        Extra represents arbitrary session data.

        :param access_token_extra: The access_token_extra of this Context.
        :type: dict(str, object)
        """

        self._access_token_extra = access_token_extra

    @property
    def client_id(self):
        """
        Gets the client_id of this Context.
        ClientID is id of the client the token was issued for..

        :return: The client_id of this Context.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Context.
        ClientID is id of the client the token was issued for..

        :param client_id: The client_id of this Context.
        :type: str
        """

        self._client_id = client_id

    @property
    def expires_at(self):
        """
        Gets the expires_at of this Context.
        ExpiresAt is the expiry timestamp.

        :return: The expires_at of this Context.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this Context.
        ExpiresAt is the expiry timestamp.

        :param expires_at: The expires_at of this Context.
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def granted_scopes(self):
        """
        Gets the granted_scopes of this Context.
        GrantedScopes is a list of scopes that the subject authorized when asked for consent.

        :return: The granted_scopes of this Context.
        :rtype: list[str]
        """
        return self._granted_scopes

    @granted_scopes.setter
    def granted_scopes(self, granted_scopes):
        """
        Sets the granted_scopes of this Context.
        GrantedScopes is a list of scopes that the subject authorized when asked for consent.

        :param granted_scopes: The granted_scopes of this Context.
        :type: list[str]
        """

        self._granted_scopes = granted_scopes

    @property
    def issued_at(self):
        """
        Gets the issued_at of this Context.
        IssuedAt is the token creation time stamp.

        :return: The issued_at of this Context.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """
        Sets the issued_at of this Context.
        IssuedAt is the token creation time stamp.

        :param issued_at: The issued_at of this Context.
        :type: datetime
        """

        self._issued_at = issued_at

    @property
    def issuer(self):
        """
        Gets the issuer of this Context.
        Issuer is the id of the issuer, typically an hydra instance.

        :return: The issuer of this Context.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """
        Sets the issuer of this Context.
        Issuer is the id of the issuer, typically an hydra instance.

        :param issuer: The issuer of this Context.
        :type: str
        """

        self._issuer = issuer

    @property
    def subject(self):
        """
        Gets the subject of this Context.
        Subject is the identity that authorized issuing the token, for example a user or an OAuth2 app. This is usually a uuid but you can choose a urn or some other id too.

        :return: The subject of this Context.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Context.
        Subject is the identity that authorized issuing the token, for example a user or an OAuth2 app. This is usually a uuid but you can choose a urn or some other id too.

        :param subject: The subject of this Context.
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Context):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
